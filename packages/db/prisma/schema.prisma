// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId    String   @unique
  email      String   @unique
  name       String
  profilePic String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  subscriptions Subscription[]
  transactions  Transaction[]
  videos        Video[]
  projects      Project[]
  clips         Clip[]
}

model Subscription {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  plan           String
  paymentMethod  String
  orderId        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  amount     Float
  currency   String
  paymentId  String
  orderId    String?
  plan       String
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
}

model Video {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  filename    String
  title       String
  description String?
  storage     String
  thumbnail   String?
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}

model Project {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  sourceType   String
  sourceUrl    String
  storageBytes Int
  durationMs   Int
  title        String
  status       String
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
  clips        Clip[]
}

model Clip {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  duration     Float
  curationId   String?
  projectId    String   @db.ObjectId
  originalId   String?
  userId       String   @db.ObjectId
  previewUri   String
  exportUri    String
  durationMs   Int
  startMs      Int
  endMs        Int
  title        String
  description  String?
  hashtags     String[]
  viralityScore Float
  renderPrefId String?
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
  project      Project  @relation(fields: [projectId], references: [id])
}